{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Kegiatan 2 Modul 3.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_iP7_H-5ubtG",
        "outputId": "444ea138-3070-4a36-de5e-8d565f388dab"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fWkAcnefSPKI"
      },
      "source": [
        "# Definisikan path kaggle json\n",
        "# Sesuaikan dengan path anda\n",
        "import os\n",
        "os.environ['KAGGLE_CONFIG_DIR'] = \"/content/drive/My Drive/Kaggle\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IPUJ-XM5S4Th",
        "outputId": "52b1739b-5617-4430-c20b-b2039be5ac91"
      },
      "source": [
        "# Ubah lokasi direktori kerja\n",
        "# Sesuaikan dengan path anda\n",
        "%cd /content/drive/My Drive/Kaggle"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/My Drive/Kaggle\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "69Bbmd-TCGhh",
        "outputId": "e128c07e-8372-41c5-e41a-e2e7f0329a39"
      },
      "source": [
        "# Cek apakah api sudah terbaca oleh sistem\n",
        "!ls  "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "kaggle.json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "emSTR53KTGW9",
        "outputId": "4bd1e33b-1b6f-4923-a8e0-67ed57656e4f"
      },
      "source": [
        "!kaggle datasets download -d iarunava/cell-images-for-detecting-malaria"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading cell-images-for-detecting-malaria.zip to /content/drive/My Drive/Kaggle\n",
            " 98% 662M/675M [00:09<00:00, 62.6MB/s]\n",
            "100% 675M/675M [00:09<00:00, 73.2MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JcpagHVWbdDY",
        "outputId": "0262bf98-f610-40fe-fad9-b65addda3e40"
      },
      "source": [
        "# Cek isi direktori kerja dan memastikan dataset telah berhasil didownload.\n",
        "!ls"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cell-images-for-detecting-malaria.zip  kaggle.json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3HDyNsR3bam4"
      },
      "source": [
        "# Ekstrak file dataset dan hapus file zip dataset agar tidak memakan banyak tempat.\n",
        "!unzip \\*.zip &> /dev/null && rm *.zip"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vgw_k1zihmkK",
        "outputId": "fd1d3caa-3b61-4362-8228-2fddccbf04b5"
      },
      "source": [
        "# Cek isi direktori kerja untuk memastikan dataset telah berhasil diekstrak.\n",
        "!ls"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cell_images  kaggle.json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h653ro4Q83Lz"
      },
      "source": [
        "from os import mkdir\n",
        "\n",
        "mkdir('dataset')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9WvlxS_m84ND",
        "outputId": "4b24a2ef-fa72-4138-859d-bccade5b9807"
      },
      "source": [
        "ls"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[0m\u001b[01;34mcell_images\u001b[0m/  \u001b[01;34mdataset\u001b[0m/  kaggle.json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "1uuXXGs587Ad",
        "outputId": "7e80214f-297b-4028-c7b4-cb3010e2b754"
      },
      "source": [
        "import shutil, sys\n",
        "\n",
        "shutil.move(\"/content/drive/My Drive/Kaggle/cell_images/Uninfected\", \"/content/drive/My Drive/Kaggle/dataset\") \n",
        "shutil.move(\"/content/drive/My Drive/Kaggle/cell_images/Parasitized\", \"/content/drive/My Drive/Kaggle/dataset\") "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'/content/drive/My Drive/Kaggle/dataset/Parasitized'"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HExrb2GLmkyB"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import os\n",
        "from shutil import copyfile\n",
        "\n",
        "TRAIN_DIR = \"/content/drive/My Drive/Kaggle/train/\"\n",
        "VALID_DIR =\"/content/drive/My Drive/Kaggle/valid/\"\n",
        "TEST_DIR =\"/content/drive/My Drive/Kaggle/test/\"\n",
        "\n",
        "os.mkdir(TRAIN_DIR)\n",
        "os.mkdir(VALID_DIR)\n",
        "os.mkdir(TEST_DIR)\n",
        "\n",
        "for label in ['Uninfected', 'Parasitized']:\n",
        "    os.mkdir(TRAIN_DIR+label)\n",
        "    os.mkdir(VALID_DIR+label)\n",
        "    os.mkdir(TEST_DIR+label)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l-LngDpWjtTO",
        "outputId": "71358f26-32a5-4c2f-f0fc-573e8939e9f1"
      },
      "source": [
        "import random\n",
        "\n",
        "def train_valid_test_split(source, train_dir, valid_dir, test_dir,train_size, valid_size, test_size):\n",
        "    # get files\n",
        "    files = []\n",
        "    for filename in os.listdir(source):\n",
        "        file = source + filename\n",
        "        if os.path.getsize(file) > 0:\n",
        "            files.append(filename)\n",
        "    \n",
        "    # train valid split\n",
        "    train_size = int(len(files) * (1-(valid_size + train_size)))\n",
        "    valid_size = int(len(files) * (1-(valid_size + test_size)))\n",
        "    test_size = int(len(files) * (1-train_size))\n",
        "  \n",
        "    # shuffle the dataset\n",
        "    shuffled_files = random.sample(files, len(files))\n",
        "    \n",
        "    train_set = shuffled_files[train_size:valid_size]\n",
        "    valid_set = shuffled_files[valid_size:]\n",
        "    test_set = shuffled_files[:train_size]\n",
        "    \n",
        "    for filename in train_set:\n",
        "        filepath = source + filename\n",
        "        destination = train_dir + filename\n",
        "        copyfile(filepath, destination)\n",
        "        \n",
        "    for filename in valid_set:\n",
        "        filepath = source + filename\n",
        "        destination = valid_dir + filename\n",
        "        copyfile(filepath, destination)\n",
        "    \n",
        "    for filename in test_set:\n",
        "        filepath = source + filename\n",
        "        destination = test_dir + filename\n",
        "        copyfile(filepath, destination)\n",
        "\n",
        "SOURCE = \"/content/drive/My Drive/Kaggle/dataset/\"\n",
        "\n",
        "for label in ['Uninfected', 'Parasitized']:\n",
        "    print(label)\n",
        "    train_valid_test_split(SOURCE+label+'/', TRAIN_DIR +label+'/', VALID_DIR +label+'/', TEST_DIR +label+'/', train_size=0.8, valid_size=0.19, test_size=0.01)\n",
        "    print(len(os.listdir(TRAIN_DIR +label+'/')))\n",
        "    print(len(os.listdir(VALID_DIR +label+'/')))\n",
        "    print(len(os.listdir(TEST_DIR +label+'/')))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Uninfected\n",
            "10887\n",
            "2756\n",
            "137\n",
            "Parasitized\n",
            "10887\n",
            "2756\n",
            "137\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R5nqLHfaDTIv"
      },
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "train_generator = ImageDataGenerator(\n",
        "    rescale = 1./255,\n",
        "    horizontal_flip = True,\n",
        "    vertical_flip = True,\n",
        "    rotation_range = 90,\n",
        "    height_shift_range = 0.2,\n",
        "    width_shift_range = 0.2,\n",
        "    zoom_range = 0.2\n",
        ")\n",
        "\n",
        "test_generator = ImageDataGenerator(\n",
        "    rescale = 1./255,\n",
        "    validation_split = 0.7\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JMIuWRv2DZyx",
        "outputId": "bfb7d041-bb80-446c-f2a5-4a458a9bafb7"
      },
      "source": [
        "train_images = train_generator.flow_from_directory(\n",
        "    TRAIN_DIR,\n",
        "    target_size=(100, 100),\n",
        "    color_mode='rgb',\n",
        "    class_mode='categorical',\n",
        "    batch_size=32,\n",
        "    shuffle=True,\n",
        "    seed=42\n",
        ")\n",
        "val_images = test_generator.flow_from_directory(\n",
        "    VALID_DIR,\n",
        "    target_size=(100, 100),\n",
        "    color_mode='rgb',\n",
        "    class_mode='categorical',\n",
        "    batch_size=32,\n",
        "    shuffle=True,\n",
        "    seed=42,\n",
        "    subset = 'training'\n",
        ")\n",
        "\n",
        "test_images = test_generator.flow_from_directory(\n",
        "    TEST_DIR,\n",
        "    target_size=(100, 100),\n",
        "    color_mode='rgb',\n",
        "    class_mode='categorical',\n",
        "    batch_size=32,\n",
        "    shuffle=False,\n",
        "    seed=42,\n",
        "    subset = 'validation'\n",
        ")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 21773 images belonging to 2 classes.\n",
            "Found 1654 images belonging to 2 classes.\n",
            "Found 190 images belonging to 2 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_BwlkwcO2fpf"
      },
      "source": [
        "# TULIS KODE ANDA DISINI\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential, load_model\n",
        "from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten, BatchNormalization, Dropout\n",
        "model = tf.keras.models.Sequential([\n",
        "    tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(100, 100, 3)),\n",
        "    tf.keras.layers.MaxPooling2D(2, 2),\n",
        "    tf.keras.layers.Dropout(0.2),\n",
        "    tf.keras.layers.BatchNormalization(),\n",
        "    tf.keras.layers.Conv2D(16, (3, 3), activation='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2, 2),\n",
        "    tf.keras.layers.Dropout(0.2),\n",
        "    tf.keras.layers.BatchNormalization(),\n",
        "    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2, 2),\n",
        "    tf.keras.layers.Dropout(0.2),\n",
        "    tf.keras.layers.BatchNormalization(),\n",
        "    tf.keras.layers.Flatten(),\n",
        "    tf.keras.layers.Dense(64, activation='relu'),\n",
        "    tf.keras.layers.Dropout(0.2),\n",
        "    tf.keras.layers.BatchNormalization(),\n",
        "    tf.keras.layers.Dense(2, activation='softmax')\n",
        "])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NyQnQdoi2TB8",
        "outputId": "557cb0a5-16fe-412a-f448-5b317e24b936"
      },
      "source": [
        "# Print model summary\n",
        "print(model.summary())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 98, 98, 16)        448       \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 49, 49, 16)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 49, 49, 16)        0         \n",
            "                                                                 \n",
            " batch_normalization (BatchN  (None, 49, 49, 16)       64        \n",
            " ormalization)                                                   \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 47, 47, 16)        2320      \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPooling  (None, 23, 23, 16)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " dropout_1 (Dropout)         (None, 23, 23, 16)        0         \n",
            "                                                                 \n",
            " batch_normalization_1 (Batc  (None, 23, 23, 16)       64        \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " conv2d_2 (Conv2D)           (None, 21, 21, 32)        4640      \n",
            "                                                                 \n",
            " max_pooling2d_2 (MaxPooling  (None, 10, 10, 32)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " dropout_2 (Dropout)         (None, 10, 10, 32)        0         \n",
            "                                                                 \n",
            " batch_normalization_2 (Batc  (None, 10, 10, 32)       128       \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 3200)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 64)                204864    \n",
            "                                                                 \n",
            " dropout_3 (Dropout)         (None, 64)                0         \n",
            "                                                                 \n",
            " batch_normalization_3 (Batc  (None, 64)               256       \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 2)                 130       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 212,914\n",
            "Trainable params: 212,658\n",
            "Non-trainable params: 256\n",
            "_________________________________________________________________\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BS7dUVzydiYe",
        "outputId": "aebf77b3-5da5-461d-9a5d-048e7fca71dc"
      },
      "source": [
        "# Compile model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "model.compile(optimizer=Adam(lr=0.0001), \n",
        "              loss='categorical_crossentropy', \n",
        "              metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super(Adam, self).__init__(name, **kwargs)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UxcAo9Ocdk0j",
        "outputId": "f5eaa1fa-b38f-4cf8-fb33-8fcaf7a95627"
      },
      "source": [
        "history = model.fit(\n",
        "    train_images,\n",
        "    validation_data = val_images,\n",
        "    epochs = 100,\n",
        "    callbacks = [\n",
        "        tf.keras.callbacks.ReduceLROnPlateau(\n",
        "            monitor='val_loss',\n",
        "            factor=0.5,\n",
        "            patience=40,\n",
        "            verbose=1, \n",
        "            mode='auto',\n",
        "            cooldown=1\n",
        "        )\n",
        "    ]\n",
        ")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "681/681 [==============================] - 244s 357ms/step - loss: 0.7937 - accuracy: 0.5935 - val_loss: 0.6701 - val_accuracy: 0.5538 - lr: 1.0000e-04\n",
            "Epoch 2/100\n",
            "681/681 [==============================] - 306s 449ms/step - loss: 0.6702 - accuracy: 0.6420 - val_loss: 0.6162 - val_accuracy: 0.5744 - lr: 1.0000e-04\n",
            "Epoch 3/100\n",
            "681/681 [==============================] - 252s 370ms/step - loss: 0.5845 - accuracy: 0.7065 - val_loss: 0.4126 - val_accuracy: 0.8458 - lr: 1.0000e-04\n",
            "Epoch 4/100\n",
            "681/681 [==============================] - 244s 358ms/step - loss: 0.4854 - accuracy: 0.7775 - val_loss: 0.3346 - val_accuracy: 0.8797 - lr: 1.0000e-04\n",
            "Epoch 5/100\n",
            "681/681 [==============================] - 243s 356ms/step - loss: 0.4228 - accuracy: 0.8169 - val_loss: 0.3421 - val_accuracy: 0.8609 - lr: 1.0000e-04\n",
            "Epoch 6/100\n",
            "681/681 [==============================] - 243s 357ms/step - loss: 0.3877 - accuracy: 0.8376 - val_loss: 0.3793 - val_accuracy: 0.8229 - lr: 1.0000e-04\n",
            "Epoch 7/100\n",
            "681/681 [==============================] - 242s 355ms/step - loss: 0.3721 - accuracy: 0.8454 - val_loss: 0.2826 - val_accuracy: 0.9002 - lr: 1.0000e-04\n",
            "Epoch 8/100\n",
            "681/681 [==============================] - 245s 360ms/step - loss: 0.3600 - accuracy: 0.8532 - val_loss: 0.2980 - val_accuracy: 0.8875 - lr: 1.0000e-04\n",
            "Epoch 9/100\n",
            "681/681 [==============================] - 247s 362ms/step - loss: 0.3485 - accuracy: 0.8596 - val_loss: 0.2939 - val_accuracy: 0.8881 - lr: 1.0000e-04\n",
            "Epoch 10/100\n",
            "681/681 [==============================] - 244s 358ms/step - loss: 0.3375 - accuracy: 0.8671 - val_loss: 0.2577 - val_accuracy: 0.9105 - lr: 1.0000e-04\n",
            "Epoch 11/100\n",
            "681/681 [==============================] - 242s 356ms/step - loss: 0.3235 - accuracy: 0.8697 - val_loss: 0.3520 - val_accuracy: 0.8851 - lr: 1.0000e-04\n",
            "Epoch 12/100\n",
            "681/681 [==============================] - 244s 358ms/step - loss: 0.3164 - accuracy: 0.8765 - val_loss: 0.3709 - val_accuracy: 0.8875 - lr: 1.0000e-04\n",
            "Epoch 13/100\n",
            "681/681 [==============================] - 252s 369ms/step - loss: 0.3133 - accuracy: 0.8769 - val_loss: 0.3575 - val_accuracy: 0.8869 - lr: 1.0000e-04\n",
            "Epoch 14/100\n",
            "681/681 [==============================] - 246s 361ms/step - loss: 0.3070 - accuracy: 0.8826 - val_loss: 0.3429 - val_accuracy: 0.8912 - lr: 1.0000e-04\n",
            "Epoch 15/100\n",
            "681/681 [==============================] - 243s 357ms/step - loss: 0.2974 - accuracy: 0.8867 - val_loss: 0.3285 - val_accuracy: 0.8930 - lr: 1.0000e-04\n",
            "Epoch 16/100\n",
            "681/681 [==============================] - 243s 356ms/step - loss: 0.2906 - accuracy: 0.8909 - val_loss: 0.3727 - val_accuracy: 0.8894 - lr: 1.0000e-04\n",
            "Epoch 17/100\n",
            "681/681 [==============================] - 241s 353ms/step - loss: 0.2925 - accuracy: 0.8886 - val_loss: 0.3502 - val_accuracy: 0.8948 - lr: 1.0000e-04\n",
            "Epoch 18/100\n",
            "681/681 [==============================] - 245s 360ms/step - loss: 0.2813 - accuracy: 0.8969 - val_loss: 0.3578 - val_accuracy: 0.8960 - lr: 1.0000e-04\n",
            "Epoch 19/100\n",
            "681/681 [==============================] - 242s 355ms/step - loss: 0.2790 - accuracy: 0.8966 - val_loss: 0.3279 - val_accuracy: 0.9008 - lr: 1.0000e-04\n",
            "Epoch 20/100\n",
            "681/681 [==============================] - 240s 352ms/step - loss: 0.2745 - accuracy: 0.8997 - val_loss: 0.3472 - val_accuracy: 0.8960 - lr: 1.0000e-04\n",
            "Epoch 21/100\n",
            "681/681 [==============================] - 243s 357ms/step - loss: 0.2668 - accuracy: 0.9032 - val_loss: 0.3883 - val_accuracy: 0.8960 - lr: 1.0000e-04\n",
            "Epoch 22/100\n",
            "681/681 [==============================] - 242s 354ms/step - loss: 0.2598 - accuracy: 0.9062 - val_loss: 0.3165 - val_accuracy: 0.9063 - lr: 1.0000e-04\n",
            "Epoch 23/100\n",
            "681/681 [==============================] - 238s 350ms/step - loss: 0.2626 - accuracy: 0.9053 - val_loss: 0.3355 - val_accuracy: 0.9027 - lr: 1.0000e-04\n",
            "Epoch 24/100\n",
            "681/681 [==============================] - 243s 357ms/step - loss: 0.2572 - accuracy: 0.9080 - val_loss: 0.2958 - val_accuracy: 0.9129 - lr: 1.0000e-04\n",
            "Epoch 25/100\n",
            "681/681 [==============================] - 235s 345ms/step - loss: 0.2561 - accuracy: 0.9061 - val_loss: 0.3480 - val_accuracy: 0.9015 - lr: 1.0000e-04\n",
            "Epoch 26/100\n",
            "681/681 [==============================] - 236s 347ms/step - loss: 0.2550 - accuracy: 0.9077 - val_loss: 0.3952 - val_accuracy: 0.8936 - lr: 1.0000e-04\n",
            "Epoch 27/100\n",
            "681/681 [==============================] - 238s 349ms/step - loss: 0.2530 - accuracy: 0.9099 - val_loss: 0.3025 - val_accuracy: 0.9051 - lr: 1.0000e-04\n",
            "Epoch 28/100\n",
            "681/681 [==============================] - 237s 347ms/step - loss: 0.2530 - accuracy: 0.9095 - val_loss: 0.4641 - val_accuracy: 0.8591 - lr: 1.0000e-04\n",
            "Epoch 29/100\n",
            "681/681 [==============================] - 239s 350ms/step - loss: 0.2500 - accuracy: 0.9102 - val_loss: 0.3049 - val_accuracy: 0.9063 - lr: 1.0000e-04\n",
            "Epoch 30/100\n",
            "681/681 [==============================] - 236s 346ms/step - loss: 0.2485 - accuracy: 0.9131 - val_loss: 0.3335 - val_accuracy: 0.9021 - lr: 1.0000e-04\n",
            "Epoch 31/100\n",
            "681/681 [==============================] - 240s 353ms/step - loss: 0.2495 - accuracy: 0.9124 - val_loss: 0.4115 - val_accuracy: 0.8803 - lr: 1.0000e-04\n",
            "Epoch 32/100\n",
            "681/681 [==============================] - 241s 353ms/step - loss: 0.2472 - accuracy: 0.9119 - val_loss: 0.2298 - val_accuracy: 0.9208 - lr: 1.0000e-04\n",
            "Epoch 33/100\n",
            "681/681 [==============================] - 239s 351ms/step - loss: 0.2419 - accuracy: 0.9131 - val_loss: 0.2720 - val_accuracy: 0.9141 - lr: 1.0000e-04\n",
            "Epoch 34/100\n",
            "681/681 [==============================] - 240s 352ms/step - loss: 0.2414 - accuracy: 0.9145 - val_loss: 0.3266 - val_accuracy: 0.9081 - lr: 1.0000e-04\n",
            "Epoch 35/100\n",
            "681/681 [==============================] - 241s 353ms/step - loss: 0.2404 - accuracy: 0.9140 - val_loss: 0.3711 - val_accuracy: 0.8936 - lr: 1.0000e-04\n",
            "Epoch 36/100\n",
            "681/681 [==============================] - 238s 349ms/step - loss: 0.2409 - accuracy: 0.9150 - val_loss: 0.2632 - val_accuracy: 0.9117 - lr: 1.0000e-04\n",
            "Epoch 37/100\n",
            "681/681 [==============================] - 261s 384ms/step - loss: 0.2412 - accuracy: 0.9140 - val_loss: 0.3043 - val_accuracy: 0.9105 - lr: 1.0000e-04\n",
            "Epoch 38/100\n",
            "681/681 [==============================] - 251s 369ms/step - loss: 0.2386 - accuracy: 0.9155 - val_loss: 0.2870 - val_accuracy: 0.9148 - lr: 1.0000e-04\n",
            "Epoch 39/100\n",
            "681/681 [==============================] - 244s 359ms/step - loss: 0.2375 - accuracy: 0.9137 - val_loss: 0.3561 - val_accuracy: 0.9027 - lr: 1.0000e-04\n",
            "Epoch 40/100\n",
            "681/681 [==============================] - 237s 348ms/step - loss: 0.2380 - accuracy: 0.9166 - val_loss: 0.3052 - val_accuracy: 0.9063 - lr: 1.0000e-04\n",
            "Epoch 41/100\n",
            "681/681 [==============================] - 236s 347ms/step - loss: 0.2325 - accuracy: 0.9166 - val_loss: 0.2939 - val_accuracy: 0.9093 - lr: 1.0000e-04\n",
            "Epoch 42/100\n",
            "681/681 [==============================] - 237s 347ms/step - loss: 0.2382 - accuracy: 0.9155 - val_loss: 0.2289 - val_accuracy: 0.9232 - lr: 1.0000e-04\n",
            "Epoch 43/100\n",
            "681/681 [==============================] - 236s 346ms/step - loss: 0.2389 - accuracy: 0.9153 - val_loss: 0.2585 - val_accuracy: 0.9166 - lr: 1.0000e-04\n",
            "Epoch 44/100\n",
            "681/681 [==============================] - 234s 343ms/step - loss: 0.2348 - accuracy: 0.9169 - val_loss: 0.2564 - val_accuracy: 0.9190 - lr: 1.0000e-04\n",
            "Epoch 45/100\n",
            "681/681 [==============================] - 239s 350ms/step - loss: 0.2280 - accuracy: 0.9186 - val_loss: 0.2362 - val_accuracy: 0.9232 - lr: 1.0000e-04\n",
            "Epoch 46/100\n",
            "681/681 [==============================] - 235s 345ms/step - loss: 0.2294 - accuracy: 0.9182 - val_loss: 0.3589 - val_accuracy: 0.8990 - lr: 1.0000e-04\n",
            "Epoch 47/100\n",
            "681/681 [==============================] - 234s 344ms/step - loss: 0.2303 - accuracy: 0.9182 - val_loss: 0.2582 - val_accuracy: 0.9184 - lr: 1.0000e-04\n",
            "Epoch 48/100\n",
            "681/681 [==============================] - 234s 343ms/step - loss: 0.2327 - accuracy: 0.9169 - val_loss: 0.3839 - val_accuracy: 0.8815 - lr: 1.0000e-04\n",
            "Epoch 49/100\n",
            "681/681 [==============================] - 232s 341ms/step - loss: 0.2334 - accuracy: 0.9176 - val_loss: 0.3802 - val_accuracy: 0.8942 - lr: 1.0000e-04\n",
            "Epoch 50/100\n",
            "681/681 [==============================] - 233s 343ms/step - loss: 0.2263 - accuracy: 0.9187 - val_loss: 0.2884 - val_accuracy: 0.9105 - lr: 1.0000e-04\n",
            "Epoch 51/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2329 - accuracy: 0.9164 - val_loss: 0.2501 - val_accuracy: 0.9202 - lr: 1.0000e-04\n",
            "Epoch 52/100\n",
            "681/681 [==============================] - 234s 344ms/step - loss: 0.2235 - accuracy: 0.9205 - val_loss: 0.2396 - val_accuracy: 0.9238 - lr: 1.0000e-04\n",
            "Epoch 53/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2265 - accuracy: 0.9194 - val_loss: 0.2321 - val_accuracy: 0.9250 - lr: 1.0000e-04\n",
            "Epoch 54/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2306 - accuracy: 0.9190 - val_loss: 0.2732 - val_accuracy: 0.9160 - lr: 1.0000e-04\n",
            "Epoch 55/100\n",
            "681/681 [==============================] - 232s 341ms/step - loss: 0.2268 - accuracy: 0.9188 - val_loss: 0.2461 - val_accuracy: 0.9202 - lr: 1.0000e-04\n",
            "Epoch 56/100\n",
            "681/681 [==============================] - 244s 358ms/step - loss: 0.2245 - accuracy: 0.9196 - val_loss: 0.2375 - val_accuracy: 0.9226 - lr: 1.0000e-04\n",
            "Epoch 57/100\n",
            "681/681 [==============================] - 237s 348ms/step - loss: 0.2243 - accuracy: 0.9212 - val_loss: 0.2249 - val_accuracy: 0.9256 - lr: 1.0000e-04\n",
            "Epoch 58/100\n",
            "681/681 [==============================] - 234s 343ms/step - loss: 0.2251 - accuracy: 0.9186 - val_loss: 0.3023 - val_accuracy: 0.9093 - lr: 1.0000e-04\n",
            "Epoch 59/100\n",
            "681/681 [==============================] - 234s 343ms/step - loss: 0.2212 - accuracy: 0.9209 - val_loss: 0.2291 - val_accuracy: 0.9268 - lr: 1.0000e-04\n",
            "Epoch 60/100\n",
            "681/681 [==============================] - 238s 349ms/step - loss: 0.2228 - accuracy: 0.9225 - val_loss: 0.2669 - val_accuracy: 0.9202 - lr: 1.0000e-04\n",
            "Epoch 61/100\n",
            "681/681 [==============================] - 234s 344ms/step - loss: 0.2229 - accuracy: 0.9190 - val_loss: 0.2917 - val_accuracy: 0.9160 - lr: 1.0000e-04\n",
            "Epoch 62/100\n",
            "681/681 [==============================] - 234s 343ms/step - loss: 0.2273 - accuracy: 0.9209 - val_loss: 0.2367 - val_accuracy: 0.9214 - lr: 1.0000e-04\n",
            "Epoch 63/100\n",
            "681/681 [==============================] - 233s 343ms/step - loss: 0.2264 - accuracy: 0.9206 - val_loss: 0.2117 - val_accuracy: 0.9293 - lr: 1.0000e-04\n",
            "Epoch 64/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2207 - accuracy: 0.9207 - val_loss: 0.2698 - val_accuracy: 0.9148 - lr: 1.0000e-04\n",
            "Epoch 65/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2235 - accuracy: 0.9196 - val_loss: 0.2458 - val_accuracy: 0.9208 - lr: 1.0000e-04\n",
            "Epoch 66/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2211 - accuracy: 0.9216 - val_loss: 0.2876 - val_accuracy: 0.9166 - lr: 1.0000e-04\n",
            "Epoch 67/100\n",
            "681/681 [==============================] - 234s 343ms/step - loss: 0.2176 - accuracy: 0.9216 - val_loss: 0.1761 - val_accuracy: 0.9359 - lr: 1.0000e-04\n",
            "Epoch 68/100\n",
            "681/681 [==============================] - 234s 344ms/step - loss: 0.2204 - accuracy: 0.9213 - val_loss: 0.2819 - val_accuracy: 0.9190 - lr: 1.0000e-04\n",
            "Epoch 69/100\n",
            "681/681 [==============================] - 235s 345ms/step - loss: 0.2187 - accuracy: 0.9224 - val_loss: 0.2252 - val_accuracy: 0.9293 - lr: 1.0000e-04\n",
            "Epoch 70/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2154 - accuracy: 0.9239 - val_loss: 0.2396 - val_accuracy: 0.9250 - lr: 1.0000e-04\n",
            "Epoch 71/100\n",
            "681/681 [==============================] - 238s 349ms/step - loss: 0.2183 - accuracy: 0.9212 - val_loss: 0.2638 - val_accuracy: 0.9160 - lr: 1.0000e-04\n",
            "Epoch 72/100\n",
            "681/681 [==============================] - 237s 348ms/step - loss: 0.2164 - accuracy: 0.9233 - val_loss: 0.2216 - val_accuracy: 0.9262 - lr: 1.0000e-04\n",
            "Epoch 73/100\n",
            "681/681 [==============================] - 235s 345ms/step - loss: 0.2205 - accuracy: 0.9213 - val_loss: 0.2153 - val_accuracy: 0.9256 - lr: 1.0000e-04\n",
            "Epoch 74/100\n",
            "681/681 [==============================] - 234s 343ms/step - loss: 0.2185 - accuracy: 0.9224 - val_loss: 0.2440 - val_accuracy: 0.9202 - lr: 1.0000e-04\n",
            "Epoch 75/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2120 - accuracy: 0.9270 - val_loss: 0.2304 - val_accuracy: 0.9220 - lr: 1.0000e-04\n",
            "Epoch 76/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2135 - accuracy: 0.9241 - val_loss: 0.2172 - val_accuracy: 0.9268 - lr: 1.0000e-04\n",
            "Epoch 77/100\n",
            "681/681 [==============================] - 235s 344ms/step - loss: 0.2256 - accuracy: 0.9209 - val_loss: 0.2629 - val_accuracy: 0.9202 - lr: 1.0000e-04\n",
            "Epoch 78/100\n",
            "681/681 [==============================] - 234s 344ms/step - loss: 0.2148 - accuracy: 0.9248 - val_loss: 0.2279 - val_accuracy: 0.9202 - lr: 1.0000e-04\n",
            "Epoch 79/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2134 - accuracy: 0.9235 - val_loss: 0.1815 - val_accuracy: 0.9377 - lr: 1.0000e-04\n",
            "Epoch 80/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2140 - accuracy: 0.9253 - val_loss: 0.2135 - val_accuracy: 0.9268 - lr: 1.0000e-04\n",
            "Epoch 81/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2124 - accuracy: 0.9240 - val_loss: 0.2369 - val_accuracy: 0.9244 - lr: 1.0000e-04\n",
            "Epoch 82/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2166 - accuracy: 0.9221 - val_loss: 0.2120 - val_accuracy: 0.9281 - lr: 1.0000e-04\n",
            "Epoch 83/100\n",
            "681/681 [==============================] - 233s 343ms/step - loss: 0.2149 - accuracy: 0.9237 - val_loss: 0.2416 - val_accuracy: 0.9196 - lr: 1.0000e-04\n",
            "Epoch 84/100\n",
            "681/681 [==============================] - 234s 343ms/step - loss: 0.2161 - accuracy: 0.9250 - val_loss: 0.1917 - val_accuracy: 0.9365 - lr: 1.0000e-04\n",
            "Epoch 85/100\n",
            "681/681 [==============================] - 234s 344ms/step - loss: 0.2121 - accuracy: 0.9253 - val_loss: 0.2536 - val_accuracy: 0.9202 - lr: 1.0000e-04\n",
            "Epoch 86/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2146 - accuracy: 0.9247 - val_loss: 0.2237 - val_accuracy: 0.9262 - lr: 1.0000e-04\n",
            "Epoch 87/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2141 - accuracy: 0.9236 - val_loss: 0.1940 - val_accuracy: 0.9371 - lr: 1.0000e-04\n",
            "Epoch 88/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2154 - accuracy: 0.9240 - val_loss: 0.2374 - val_accuracy: 0.9220 - lr: 1.0000e-04\n",
            "Epoch 89/100\n",
            "681/681 [==============================] - 235s 344ms/step - loss: 0.2175 - accuracy: 0.9234 - val_loss: 0.2287 - val_accuracy: 0.9214 - lr: 1.0000e-04\n",
            "Epoch 90/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2128 - accuracy: 0.9234 - val_loss: 0.1734 - val_accuracy: 0.9401 - lr: 1.0000e-04\n",
            "Epoch 91/100\n",
            "681/681 [==============================] - 236s 347ms/step - loss: 0.2121 - accuracy: 0.9261 - val_loss: 0.2187 - val_accuracy: 0.9256 - lr: 1.0000e-04\n",
            "Epoch 92/100\n",
            "681/681 [==============================] - 235s 346ms/step - loss: 0.2105 - accuracy: 0.9254 - val_loss: 0.1920 - val_accuracy: 0.9365 - lr: 1.0000e-04\n",
            "Epoch 93/100\n",
            "681/681 [==============================] - 233s 342ms/step - loss: 0.2060 - accuracy: 0.9258 - val_loss: 0.1776 - val_accuracy: 0.9377 - lr: 1.0000e-04\n",
            "Epoch 94/100\n",
            "681/681 [==============================] - 232s 341ms/step - loss: 0.2098 - accuracy: 0.9248 - val_loss: 0.1685 - val_accuracy: 0.9420 - lr: 1.0000e-04\n",
            "Epoch 95/100\n",
            "681/681 [==============================] - 230s 338ms/step - loss: 0.2158 - accuracy: 0.9239 - val_loss: 0.2056 - val_accuracy: 0.9329 - lr: 1.0000e-04\n",
            "Epoch 96/100\n",
            "681/681 [==============================] - 230s 338ms/step - loss: 0.2128 - accuracy: 0.9239 - val_loss: 0.2329 - val_accuracy: 0.9262 - lr: 1.0000e-04\n",
            "Epoch 97/100\n",
            "681/681 [==============================] - 231s 339ms/step - loss: 0.2145 - accuracy: 0.9223 - val_loss: 0.1922 - val_accuracy: 0.9347 - lr: 1.0000e-04\n",
            "Epoch 98/100\n",
            "681/681 [==============================] - 230s 338ms/step - loss: 0.2084 - accuracy: 0.9267 - val_loss: 0.2185 - val_accuracy: 0.9311 - lr: 1.0000e-04\n",
            "Epoch 99/100\n",
            "681/681 [==============================] - 230s 338ms/step - loss: 0.2106 - accuracy: 0.9263 - val_loss: 0.2077 - val_accuracy: 0.9323 - lr: 1.0000e-04\n",
            "Epoch 100/100\n",
            "681/681 [==============================] - 231s 339ms/step - loss: 0.2071 - accuracy: 0.9245 - val_loss: 0.1911 - val_accuracy: 0.9383 - lr: 1.0000e-04\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wbYjokBQPPmV"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "def eval_plot(history):\n",
        "\n",
        "  plt.figure(figsize=(14, 5))\n",
        "\n",
        "  # Accuracy plot\n",
        "  plt.subplot(1, 2, 1)\n",
        "  acc = history.history['accuracy']\n",
        "  val_acc = history.history['val_accuracy']\n",
        "  epochs = range(len(acc))\n",
        "  acc_plot, = plt.plot(epochs, acc, 'r')\n",
        "  val_acc_plot, = plt.plot(epochs, val_acc, 'b')\n",
        "  plt.title('Training and Validation Accuracy')\n",
        "  plt.legend([acc_plot, val_acc_plot], ['Training Accuracy', 'Validation Accuracy'])\n",
        "\n",
        "  # Loss plot\n",
        "  plt.subplot(1, 2, 2)\n",
        "  loss = history.history['loss']\n",
        "  val_loss = history.history['val_loss']\n",
        "  epochs = range(len(loss))\n",
        "  loss_plot, = plt.plot(epochs, loss, 'r')\n",
        "  val_loss_plot, = plt.plot(epochs, val_loss, 'b')\n",
        "  plt.title('Training and Validation Loss')\n",
        "  plt.legend([loss_plot, val_loss_plot], ['Training Loss', 'Validation Loss'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "fKGHZi0-EoT1",
        "outputId": "e795497e-f023-4278-ca7f-67e579660359"
      },
      "source": [
        "eval_plot(history)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1008x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pAL-8RXzXOzg"
      },
      "source": [
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "import seaborn as sns\n",
        "\n",
        "def evaluate(model):\n",
        "  valid_generator = train_generator.flow_from_directory(\n",
        "      TRAIN_DIR, \n",
        "      target_size=(100,100), \n",
        "      batch_size=32, \n",
        "      class_mode='categorical',\n",
        "      shuffle = False)\n",
        "\n",
        "  batch_size = 32\n",
        "  num_of_test_samples = len(valid_generator.filenames)\n",
        "\n",
        "  Y_pred = model.predict_generator(valid_generator, num_of_test_samples // batch_size+1)\n",
        "  y_pred = np.argmax(Y_pred, axis=1)\n",
        "\n",
        "  print('\\nConfusion Matrix\\n')\n",
        "  cm = confusion_matrix(valid_generator.classes, y_pred)\n",
        "  plt.figure(figsize=(8, 8))\n",
        "  sns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Blues', cbar=False)\n",
        "  plt.xticks(ticks=[0.5, 1.5], labels=['Uninfected', 'Parasitized'])\n",
        "  plt.yticks(ticks=[0.5, 1.5], labels=['Uninfected', 'Parasitized'])\n",
        "  plt.xlabel(\"Predicted\")\n",
        "  plt.ylabel(\"Actual\")\n",
        "  plt.title(\"Confusion Matrix\")\n",
        "  plt.show()\n",
        "\n",
        "  print('\\n\\nClassification Report\\n')\n",
        "  target_names = ['Uninfected', 'Parasitized']\n",
        "  print(classification_report(valid_generator.classes, y_pred, target_names=target_names))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 863
        },
        "id": "uCe6qdziXcXU",
        "outputId": "91c18bee-b96f-4192-906b-1b4ed7feb55e"
      },
      "source": [
        "evaluate(model)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 21773 images belonging to 2 classes.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:15: UserWarning: `Model.predict_generator` is deprecated and will be removed in a future version. Please use `Model.predict`, which supports generators.\n",
            "  from ipykernel import kernelapp as app\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Confusion Matrix\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "Classification Report\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "  Uninfected       0.98      0.86      0.92     10887\n",
            " Parasitized       0.88      0.98      0.93     10886\n",
            "\n",
            "    accuracy                           0.92     21773\n",
            "   macro avg       0.93      0.92      0.92     21773\n",
            "weighted avg       0.93      0.92      0.92     21773\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JGBH4SIg1GT4"
      },
      "source": [
        "# serialize model to JSON\n",
        "model_json = model.to_json()\n",
        "with open(\"model.json\", \"w\") as json_file: json_file.write(model_json)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dGw_txYf1MGZ",
        "outputId": "2859371a-26e9-4a28-dae0-864778e8c2ac"
      },
      "source": [
        "# serialize weights to HDF5\n",
        "model.save_weights(\"model.h5\")\n",
        "print(\"Saved model to disk\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved model to disk\n"
          ]
        }
      ]
    }
  ]
}
